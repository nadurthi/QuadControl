







#ifndef _KINEMATIC_ESTIMATORS_H_
#define _KINEMATIC_ESTIMATORS_H_



#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <sys/types.h>
#include <fstream>
#include <cmath>
#include "quaternion_operations.h"
#include <algorithm>
using namespace std;

#include "SimpleTimer.h"
#include "MPU6050.h"


#define data_queue_length 10  //no. of time steps of data to remember( so it can be used for simple moving average filters)



SimpleTimer onboardestTimer,viconestTimer;  //usually the onboard timer is also the control update frerquency.





//add the data in D to the matrix T, row wise
void Queue_add(double * D,double T[][data_queue_length],int nrows) {

for(int r=0;r<nrows;r++){
	for(int c=0;c<data_queue_length-1;c++){
		T[r][c]=T[r][c+1];
	}
}
for(int r=0;r<nrows;r++){
	T[r][data_queue_length]=D[r];
}

};


//get the average of the queue T into the array D
void Queue_avg(double * D,double T[][data_queue_length],int nrows) {
	for(int r=0;r<nrows;r++){
		D[r]=0;
		for(int c=0;c<data_queue_length;c++){
			D[r]=D[r]+T[r][c];
		}
	}
}





/*            Explain all the function from where external secondary input is derived
 *            In my case it is the vicon data
 *            Future: Pressure, GPS input and image flow sensors will be included
//#############################################################################################




//**********************************************************************************************
*/


 //%%%%%%%%%%%%%%%%%%%%%%%   States used in your estimator/controller   %%%%%%%%%%%%%%%%%%%%%%
struct QuadStateVariable {
	double t,tvec[data_queue_length];
	double q[4],w[3],x[3],v[3],a[3],wdot[3]; //all the current filtered estimated quantities
	 double w_meas[3],a_meas[3],x_meas[3],q_meas[4]; //stores the history of IMU measurements

	 // raw data with not conditioning or estimation
	 double Data_w_meas[3][data_queue_length],Data_a_meas[3][data_queue_length],Data_q_meas[4][data_queue_length],Data_x_meas[3][data_queue_length];

	 // filtered data after conditions and estimation
	 double Data_w_est[3][data_queue_length],Data_a_est[3][data_queue_length],Data_q_est[4][data_queue_length],Data_x_est[3][data_queue_length];
	 double Data_v_est[3][data_queue_length],Data_wdot_est[3][data_queue_length];

	 double Fd[3]; //latest force thrust required

	 double ba[3],bg[3],rmis[3],qmis[4];//all the constant est parameters

	 // the std deviatins required for outlier detection q[4][3]=[q0,q1,q2,q3][maxstd,meanstd,curr_std]
	 double Maxstd_q[4][3],Maxstd_w[3][3],Maxstd_a[3][3],Maxstd_x[3][3],Maxstd_v[3][3],Maxstd_wdot[3][3];
};
 //*******************************************************************************************


/*
 * Function to first condition the data (remove outlier data). Check for physical consistency
 * for all the variables (because sometimes data from serial can be erratic). if there is an outlier
 * just use previous value or avg value
 */
void Condition_latest_data(QuadStateVariable * data,int algo){
	//checking if Fd,ba,bg,rmis,qmis make sense
	if(data->Fd){	}

//remove outliers for queues
	//algo 1: tested on matlab
	if(algo==1){
    //only the queues for the measurements
    //assumpiton: the last value in the queue is the latest raw data. This will be replaced by a outlier/averager filtered data. The raw data queue
	// is not altered
	//first compute the standard deviation of the current data set


	}
}





// Filter 1:   Onboard attitude estimator : estimates q and w.  (quaternion and body rates)
// Primary input are acc and gyro measurements
// secondary inputs are external vicon x and q. (this comes at a slower rate).
// Additionally the biases can be estimated onboard or on ground station.
// Have to send the imu data back to ground station at the same rate as vicon input.
// REMEMBER: the acc measurements actually measure the gravity force also. so always remove the gravity force to get true acc values

//**************************************** Method 1a: onboard bias correction ******************************************************





//**************************************** Method 1b: use ground station bias correction ******************************************************
//FUTURE: Correct IMU q misalignment wrt to vicon q







//Filter 2: Onboard attitude estimator
// Primary input are acc and gyro measurements
// No secondary vicon input
// biases are to be corrected with onboard imu data itself(perhaps at time 0)
// REMEMBER: the acc measurements actually measure the gravity force also. so always remove the gravity force to get true acc values


















#endif
